{"version":3,"sources":["webpack:///./app/js/partials/_budget-calc.js"],"names":["household","circumstances","adults","children_0_16","children_17_18","housing","income","earnings","benefits","pensions","other","earnings_term","benefits_term","pensions_term","other_term","total","children","outgoings","expenditure","min","max","staticOutgoings","numberalFields","numberalFieldOptions","numeral","onValueChanged","ValueChanged","$this","category","$thisVal","calculatedValue","staticValue","frequency","isNaN","Object","_calculateCategoryTotal","_calcFromMonthly","updateOutgoingInfoCard","checkReplay","mergeIncome","mergeOutgoings","setupIncomeInfoCard","cleave","e","console","amountField","document","$","$formElement","$select","fieldMin","fieldMax","calcMinMax","calculateAllFields","$input","parseFloat","$thisWarning","$closestFormValidator","mergeHousehold","element","setHouseholdFields","showChildField","setIncomeFields","$inputVal","checkWarnFields","minValue","maxValue","inputs","number"],"mappings":"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","file":"4.bundle.js","sourcesContent":["import $ from 'jquery';\r\nimport cleave from 'cleave.js';\r\nimport {getFloatValue, parseFloatWithCommas, getDurationConstants} from '../_helpers';\r\n\r\nexport default function() {\r\n    let household = {\r\n            circumstances: '',\r\n            adults: 1,\r\n            children_0_16: 0,\r\n            children_17_18: 0,\r\n            housing: '',\r\n        },\r\n        income = {\r\n            earnings: 0,\r\n            benefits: 0,\r\n            pensions: 0,\r\n            other: 0,\r\n            earnings_term: '',\r\n            benefits_term: '',\r\n            pensions_term: '',\r\n            other_term: '',\r\n            total: 0,\r\n            children: false,\r\n        },\r\n        outgoings = {\r\n            household: 0.00,\r\n            expenditure: 0.00,\r\n            other: 0.00,\r\n            total: 0.00\r\n        },\r\n        min,\r\n        max,\r\n        staticOutgoings = {},\r\n        numberalFields = [];\r\n\r\n    let numberalFieldOptions = { \r\n        numeral: true,\r\n        onValueChanged: function (e) {\r\n            \r\n            // Update user payment amount\r\n            ValueChanged(this.element) \r\n        }\r\n    };\r\n\r\n    function ValueChanged(inputField) {\r\n\r\n        // Update user payment amount\r\n        let $this = $(inputField),\r\n            category = $this.data('category'),\r\n            $thisVal = getFloatValue($this.val()),\r\n            calculatedValue,\r\n            staticValue,\r\n            frequency = $(inputField).hasClass('arrears-amount') ? 'monthly' : $this.closest('.js-field-parent').find('.js-payment-frequency').val();\r\n\r\n        switch (category) {\r\n            case 'household':\r\n                calculatedValue = getFloatValue(outgoings.household);\r\n                if (staticOutgoings.household) {\r\n                    staticValue = getFloatValue(staticOutgoings.household);\r\n                }\r\n                break;\r\n            case 'expenditure':\r\n                calculatedValue = getFloatValue(outgoings.expenditure);\r\n                if (staticOutgoings.expenditure) {\r\n                    staticValue = getFloatValue(staticOutgoings.expenditure);\r\n                }\r\n                break;\r\n            default:\r\n                calculatedValue = getFloatValue(outgoings.other);\r\n                if (staticOutgoings.other) {\r\n                    staticValue = getFloatValue(staticOutgoings.other);\r\n                }\r\n        }\r\n\r\n        if (isNaN($thisVal)) {\r\n            $thisVal = 0;\r\n        }\r\n\r\n        if ($thisVal != $this.data('oldvalue')) {\r\n            if ($thisVal == 0) {\r\n                calculatedValue = (Object.keys(staticOutgoings).length) ? staticValue + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n            }\r\n            else if ($thisVal > $this.data('oldvalue')) {\r\n                calculatedValue += _calcFromMonthly(\r\n                    ($thisVal - $this.data('oldvalue')),\r\n                    frequency\r\n                );\r\n            }\r\n            else if ($thisVal < $this.data('oldvalue')) {\r\n                calculatedValue -= _calcFromMonthly(\r\n                    ($this.data('oldvalue') - $thisVal),\r\n                    frequency\r\n                );\r\n            }\r\n            else {\r\n                calculatedValue += _calcFromMonthly(\r\n                    $thisVal,\r\n                    frequency\r\n                );\r\n            }\r\n        }\r\n\r\n        switch (category) {\r\n            case 'household':\r\n                outgoings.household = calculatedValue;\r\n                break;\r\n            case 'expenditure':\r\n                outgoings.expenditure = calculatedValue;\r\n                break;\r\n            default:\r\n                outgoings.other = calculatedValue;\r\n        }\r\n\r\n        $this.data('oldvalue', $thisVal);\r\n        updateOutgoingInfoCard();\r\n    }\r\n\r\n    if($('.js-min-max').length) {\r\n        min = getFloatValue($('.js-min-max input[name=min]').val());\r\n        max = getFloatValue($('.js-min-max input[name=max]').val());\r\n    }\r\n\r\n    // Setup\r\n    checkReplay();\r\n\r\n    mergeIncome();\r\n    mergeOutgoings();\r\n    setupIncomeInfoCard();\r\n    // END Setup\r\n\r\n    // jQuery Listeners\r\n    $('.js-budget-calc .js-payment-input').each((index, element) => {\r\n        numberalFields.push(new cleave(element, numberalFieldOptions)); \r\n    });\r\n\r\n    // Update user payment amount\r\n    $('.js-budget-calc').on('blur', '.js-payment-input', (e) => {\r\n        if($(e.currentTarget).val() != '') {\r\n            $(e.currentTarget).val(parseFloatWithCommas($(e.currentTarget).val()));\r\n        }\r\n    });\r\n\r\n    $('.js-budget-calc .js-payment-input').on('keydown', (e) => {\r\n        console.log('KEY DOWN' + e.which);\r\n    });\r\n\r\n    $('.arrears-checkbox').on('change', (e) => {\r\n        if (!e.currentTarget.checked) {\r\n\r\n            let amountField = document.getElementById(e.currentTarget.dataset.amountField);\r\n            $(amountField).val('0.00');\r\n            ValueChanged(amountField);\r\n        }\r\n    });\r\n\r\n    $('.js-payment-input').focus(function () {\r\n        let $this = $(this);\r\n        if ($this.val() == '0.00') {\r\n            $this.val('');\r\n        }\r\n    });\r\n\r\n    $('.js-payment-input').focusout(function () {\r\n        let $this = $(this);\r\n        if (!$.trim($this.val())) {\r\n            $this.val('0.00');\r\n        }\r\n    });\r\n\r\n    $('.js-payment-input')\r\n\r\n    // Expenditure - Warning Inputs\r\n    $('.js-budget-calc').on('blur', '.js-payment-input[data-warn]', (e) => {\r\n        let $this = $(e.currentTarget),\r\n            $formElement = $this.closest('.js-field-parent'),\r\n            $select = $formElement.find('.js-payment-frequency'),\r\n            fieldMin = min,\r\n            fieldMax = max;\r\n\r\n        if($this.data('min') !== undefined && $this.data('min') > 0) {\r\n            fieldMin = $this.data('min');\r\n        }\r\n\r\n        if($this.data('max') !== undefined && $this.data('max') > 0) {\r\n            fieldMax = $this.data('max');\r\n        }\r\n\r\n        calcMinMax($this, fieldMin, fieldMax, $select.val());\r\n    });\r\n\r\n    // Calculate all fields once the jquery fields have binded\r\n    calculateAllFields();\r\n\r\n    $('.js-budget-calc').on('change', '.js-payment-frequency', (e) => {\r\n        let $this = $(e.currentTarget),\r\n            $formElement = $this.closest('.js-field-parent'),\r\n            $input = $formElement.find('.js-payment-input'),\r\n            fieldMin = min,\r\n            fieldMax = max;\r\n        \r\n        if(getFloatValue($input.val()) > 0) { \r\n            let category = $input.data('category');\r\n\r\n            switch(category) {\r\n                case 'household':\r\n                    outgoings.household = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.household) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n                    break;\r\n                case 'expenditure':\r\n                    outgoings.expenditure = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.expenditure) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n                    break;\r\n                default:\r\n                    outgoings.other = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.other) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n            }\r\n\r\n            updateOutgoingInfoCard();\r\n\r\n            if($input.data('warn')) {\r\n                if($input.data('min') !== undefined && $input.data('min') > 0) {\r\n                    fieldMin = $input.data('min');\r\n                }\r\n        \r\n                if($input.data('max') !== undefined && $input.data('max') > 0) {\r\n                    fieldMax = $input.data('max');\r\n                }\r\n\r\n                calcMinMax($input, fieldMin, fieldMax, $this.val());\r\n            }\r\n        }\r\n    });\r\n\r\n    $('.js-budget-calc').on('click', '.form__element__notifcation .jw-icon-cross', (e) => {\r\n        let $this = $(e.currentTarget),\r\n            $thisWarning = $this.closest('.js-warning'),\r\n            $formElement = $this.closest('.form__element--2row');\r\n\r\n        $thisWarning.slideUp();\r\n        $formElement.removeClass('form__element--2row--warning');\r\n    });\r\n\r\n    $('.js-budget-calc #circumstances').on(\"change\", function (e) {\r\n        let $closestFormValidator = $(this).closest(\".form\").first().validate();\r\n        // Validate this element, thsi will display errors if invalid.\r\n        $closestFormValidator.element(\".js-budget-calc #circumstances\");\r\n    });\r\n\r\n    $('.js-budget-calc #housing').on(\"change\", function (e) {\r\n        let $closestFormValidator = $(this).closest(\".form\").first().validate();\r\n        // Validate this element, thsi will display errors if invalid.\r\n        $closestFormValidator.element(\".js-budget-calc #housing\");\r\n    });\r\n\r\n    // END Expenditure - Warning Inputs\r\n\r\n    // Public Functions\r\n    function checkReplay() {\r\n        if($('.js-household').length > 0) {\r\n            mergeHousehold();\r\n        }\r\n\r\n        if($('.js-income').length > 0) {\r\n            mergeIncome(true);\r\n        }\r\n    }\r\n\r\n    function showChildField() {\r\n        // TODO: Cast income.children as a bool\r\n        if(income.children != 'false') {\r\n            $('.js-budget-calc .js-child-field').removeClass('js-child-field');\r\n        }\r\n    }\r\n\r\n    function getTotal() {\r\n        return parseFloat(outgoings.household) + parseFloat(outgoings.expenditure) + parseFloat(outgoings.other);\r\n    }\r\n\r\n    function mergeHousehold() {\r\n        $('.js-household input').each((index, element) => {\r\n            element.value = element.value || household[element.name];\r\n            household[element.name] = element.value;\r\n        });\r\n\r\n        setHouseholdFields();\r\n    }\r\n\r\n    function mergeIncome(replay) {\r\n        $('.js-income input').each((index, element) => {\r\n            element.value = element.value || income[element.name];\r\n            income[element.name] = element.value;\r\n        });\r\n        showChildField();\r\n\r\n        if(replay) {\r\n            setIncomeFields();\r\n        }\r\n    }\r\n\r\n    function mergeOutgoings() {\r\n        if($('.js-outgoings').length) {\r\n            $('.js-outgoings input').each((index, element) => {\r\n                element.value = element.value || outgoings[element.name];\r\n                outgoings[element.name] = element.value;\r\n            });\r\n            if($('.js-outgoings input[name=\"no-replace\"]').length) {\r\n                staticOutgoings = Object.assign(staticOutgoings, outgoings);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setupIncomeInfoCard() {\r\n        $('.js-budget-income-info-box').find('.js-budget-total').text('£' + parseFloatWithCommas(income.total));\r\n        $('.js-budget-income-info-box').find('.js-budget-earnings').text('£' + parseFloatWithCommas(income.earnings));\r\n        $('.js-budget-income-info-box').find('.js-budget-benefits').text('£' + parseFloatWithCommas(income.benefits));\r\n        $('.js-budget-income-info-box').find('.js-budget-pensions').text('£' + parseFloatWithCommas(income.pensions));\r\n        $('.js-budget-income-info-box').find('.js-budget-other').text('£' + parseFloatWithCommas(income.other));\r\n    }\r\n\r\n    function updateOutgoingInfoCard() {\r\n        $('.js-budget-outgoings-info-box').find('.js-budget-bills').text('£' + parseFloatWithCommas(outgoings.household));\r\n        $('.js-budget-outgoings-info-box').find('.js-budget-expenditure').text('£' + parseFloatWithCommas(outgoings.expenditure));\r\n        $('.js-budget-outgoings-info-box').find('.js-budget-other').text('£' + parseFloatWithCommas(outgoings.other));\r\n        $('.js-budget-outgoings-info-box').find('.js-budget-total').text('£' + parseFloatWithCommas(getTotal()));\r\n    }\r\n\r\n    function calcMinMax(input, minValue, maxValue, frequency) {\r\n        const { week, fortnight, every4week } = getDurationConstants();\r\n        let $inputVal = getFloatValue($(input).val()),\r\n            $formElement = $(input).closest('.form__element--2row');\r\n    \r\n        switch(frequency) {\r\n            case 'monthly':\r\n                checkWarnFields($inputVal, $formElement, minValue, maxValue);\r\n                break;\r\n            case 'weekly':\r\n                checkWarnFields($inputVal, $formElement, minValue / week, maxValue / week);\r\n                break;\r\n            case 'fortnightly':\r\n                checkWarnFields($inputVal, $formElement, minValue / fortnight, maxValue / fortnight);\r\n                break;\r\n            case '4week':\r\n            case 'every 4 weeks':\r\n                checkWarnFields($inputVal, $formElement, minValue / every4week, maxValue / every4week);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function checkWarnFields($inputVal, $formElement, minValue, maxValue) {\r\n        if($inputVal != 0 && $inputVal < minValue){\r\n            $formElement.find('.js-warning-value').text('low');\r\n            $formElement.addClass('form__element--2row--warning').find('.js-warning').slideDown();\r\n        }\r\n        else if($inputVal > maxValue){\r\n            $formElement.find('.js-warning-value').text('high');\r\n            $formElement.addClass('form__element--2row--warning').find('.js-warning').slideDown();\r\n        }\r\n        else {\r\n            $formElement.removeClass('form__element--2row--warning').find('.js-warning').slideUp();\r\n        }\r\n    }\r\n\r\n    // Replay Fields\r\n    function setHouseholdFields() {\r\n        $('.js-budget-calc #circumstances').val(household.circumstances).trigger('change');\r\n        $('.js-budget-calc #adults').val(household.adults).trigger('change');\r\n        $('.js-budget-calc #children-0-16').val(household.children_0_16).trigger('change');\r\n        $('.js-budget-calc #children-17-18').val(household.children_17_18).trigger('change');\r\n        $('.js-budget-calc #housing').val(household.housing).trigger('change');\r\n    }\r\n\r\n    function setIncomeFields() {\r\n        $('.js-budget-calc #earnings').val(income.earnings).trigger('change');\r\n        $('.js-budget-calc #benefits').val(income.benefits).trigger('change');\r\n        $('.js-budget-calc #pensions').val(income.pensions).trigger('change');\r\n        $('.js-budget-calc #other').val(income.other).trigger('change');\r\n\r\n        if(income.earnings_term != '') {\r\n            $('.js-budget-calc #earnings-select').val(income.earnings_term).trigger('change');\r\n        }\r\n\r\n        if(income.benefits_term != '') {\r\n            $('.js-budget-calc #benefits-select').val(income.benefits_term).trigger('change');\r\n        }\r\n\r\n        if(income.pensions_term != '') {\r\n            $('.js-budget-calc #pensions-select').val(income.pensions_term).trigger('change');\r\n        }\r\n\r\n        if(income.other_term != '') {\r\n            $('.js-budget-calc #other-select').val(income.other_term).trigger('change');\r\n        }\r\n    }\r\n\r\n    function calculateAllFields() {\r\n        $('.js-budget-calc .js-payment-input').each((index, element) => {\r\n            let $this = $(element),\r\n                category = $this.data('category');\r\n\r\n            switch(category) {\r\n                case 'household':\r\n                    outgoings.household = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.household) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n                    break;\r\n                case 'expenditure':\r\n                    outgoings.expenditure = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.expenditure) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n                    break;\r\n                default:\r\n                    outgoings.other = (Object.keys(staticOutgoings).length) ? parseFloat(staticOutgoings.other) + _calculateCategoryTotal(category) : _calculateCategoryTotal(category);\r\n            }\r\n\r\n            $this.trigger('blur');\r\n        });\r\n\r\n        updateOutgoingInfoCard();\r\n    }\r\n    // END Replay Fields\r\n\r\n};\r\n\r\n// Private functions\r\nfunction _calculateCategoryTotal(category) {\r\n    let inputs,\r\n        total = 0;\r\n\r\n    switch(category) {\r\n        case 'household':\r\n            inputs = $('.js-budget-calc .js-payment-input[data-category=\"household\"]');\r\n            inputs.each((index, element) => {\r\n                let frequency = $(element).closest('.js-field-parent').find('.js-payment-frequency').val();\r\n\r\n                if(!isNaN(parseFloat($(element).val()))){\r\n                    total += _calcFromMonthly(\r\n                        getFloatValue($(element).val()),\r\n                        frequency\r\n                    )\r\n                }\r\n            });\r\n\r\n            return total;\r\n        case 'expenditure': \r\n            inputs = $('.js-budget-calc .js-payment-input[data-category=\"expenditure\"]');\r\n            inputs.each((index, element) => {\r\n                let frequency = $(element).closest('.js-field-parent').find('.js-payment-frequency').val();\r\n\r\n                if(!isNaN(parseFloat($(element).val()))){\r\n                    total += _calcFromMonthly(\r\n                        getFloatValue($(element).val()),\r\n                        frequency\r\n                    )\r\n                }\r\n            });\r\n\r\n            return total;\r\n        default:\r\n            inputs = $('.js-budget-calc .js-payment-input[data-category=\"other\"]');\r\n            inputs.each((index, element) => {\r\n                let frequency = $(element).closest('.js-field-parent').find('.js-payment-frequency').val();\r\n\r\n                if(!isNaN(parseFloat($(element).val()))){\r\n                    total += _calcFromMonthly(\r\n                        getFloatValue($(element).val()),\r\n                        frequency\r\n                    )\r\n                }\r\n            });\r\n            return total;\r\n    }\r\n}\r\n\r\nfunction _calcFromMonthly(number, frequency) {\r\n    const { week, fortnight, every4week } = getDurationConstants();\r\n\r\n    switch (frequency) {\r\n        case 'monthly':\r\n            return number;\r\n        case 'weekly':\r\n            return number * week;\r\n        case 'fortnightly':\r\n            return number * fortnight;\r\n        case '4week':\r\n        case 'every 4 weeks':\r\n            return number * every4week;\r\n    }\r\n}"],"sourceRoot":""}
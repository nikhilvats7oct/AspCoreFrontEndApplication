{"version":3,"sources":["webpack:///./app/js/partials/_payment-calc.js"],"names":["paymentSettings","updateNumberPayment","RefreshDDTermInfoBox","paymentFrequency","updateDatePicker","disposableIncome","averagePayment","ddAmount","updateDirectDebtInfo","element","JSON","discountActive","termLength","_calcLengthOfDD","$activePaymentSettings","numberalFields","cleave","formattedValue","monthly","window","picker","Pikaday","field","firstDay","format","minDate","maxDate","disableWeekends","showDaysInNextAndPreviousMonths","keyboardInput","weekendClause","dayOfWeek","_getWeekDay","ddPaymentAmount","ddPaymentFrequency","balance","ddTermTotalMonths","_calcDDTotalMonths","ddTermMonths","ddTermYears","Math","$this","e","$closestFormValidator","ShowHideNextButton","ResetDDOptions","DisposableIncomeSelected","AverageSetupValueSelected","OtherPaymentOfferSelected","account","discountBalance","paymentName","paymentAmount","term","paymentDate","minDateRange","maxDateRange","iAndELessThanOrIs12MonthsOld","paymentType","monthlyDisposableIncomePerAccount","averageMonthlyPayment","directDebitAmount","mergeAllPaymentSettings","setupInfoCard","setFullPaymentHiddenInput","calculateDDTerm","updatePaymentInfo","numberalFieldOptions","numeral","onValueChanged","setNumberalFields","FrequencyChanged","updateActiveSettings","dateSelected","changeStartDate","theme","width","minimumResultsForSearch","selectOnClose","updateFullPayment","setDDField","numberBalance","numberAmount","isFinite"],"mappings":"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","file":"5.bundle.js","sourcesContent":["import $ from 'jquery';\r\nimport moment from 'moment';\r\nimport cleave from 'cleave.js';\r\nimport Pikaday from 'pikaday';\r\nimport 'select2';\r\nimport { getFloatValue, parseFloatWithCommas, getDurationConstants } from '../_helpers';\r\n\r\nexport default () => {\r\n    if ($('.js-payment-calc').length > 0) {\r\n\r\n        $('.js-payment-select').on('change', (e) => {\r\n\r\n            var $this = $(e.currentTarget);\r\n            var $closestFormValidator = $this.closest('.form').first().validate();\r\n            $closestFormValidator.element('select.js-payment-select');\r\n\r\n            paymentSettings.paymentType = $this.val();\r\n            ShowHideNextButton();\r\n        });\r\n\r\n        function ResetDDOptions() {\r\n            $('#otherPaymentOption').removeClass('d-none');\r\n\r\n            if (paymentSettings.iAndELessThanOrIs12MonthsOld && paymentSettings.monthlyDisposableIncomePerAccount > 0) {\r\n                $('#disposableIncomeOption').removeClass('d-none');\r\n                $('#averagePaymentOption').addClass('d-none');\r\n            }\r\n\r\n            if (paymentSettings.iAndELessThanOrIs12MonthsOld && paymentSettings.monthlyDisposableIncomePerAccount <= 0) {\r\n                $('#disposableIncomeOption').addClass('d-none');\r\n                $('#averagePaymentOption').addClass('d-none');\r\n            }\r\n\r\n            if (!paymentSettings.iAndELessThanOrIs12MonthsOld) {\r\n                $('#disposableIncomeOption').addClass('d-none');\r\n                $('#averagePaymentOption').removeClass('d-none');\r\n            }\r\n\r\n            $('#DisposableIncome').prop('checked', false);\r\n            $('#OtherPaymentOffer').prop('checked', false);\r\n            $('#AverageSetupValue').prop('checked', false);\r\n\r\n            $('input[name=DirectDebitAmount]').val('');\r\n\r\n            updateNumberPayment(0);\r\n            RefreshDDTermInfoBox();\r\n        }\r\n\r\n        $('#btnPlanReset').on('click', (e) => {\r\n            ResetDDOptions();\r\n        });\r\n\r\n        $('.js-source-of-funds-select').on('change', (e) => {\r\n            var $this = $(e.currentTarget);\r\n            var $closestFormValidator = $this.closest('.form').first().validate();\r\n            $closestFormValidator.element('select[id=PartialPaymentSelectedSourceOfFunds]');\r\n            $closestFormValidator.element('select[id=FullPaymentSelectedSourceOfFunds]');\r\n        });\r\n\r\n        $(':radio[id=DisposableIncome]').change(function () {\r\n            DisposableIncomeSelected();\r\n            $('#PlanSetupOptionValMsg').addClass('d-none'); //Remove any validation errors for SetupPlanOption\r\n        });\r\n        \r\n        $(':radio[id=AverageSetupValue]').change(function () {\r\n            AverageSetupValueSelected();\r\n            $('#PlanSetupOptionValMsg').addClass('d-none'); //Remove any validation errors for SetupPlanOption\r\n        });\r\n        \r\n        $(':radio[id=OtherPaymentOffer]').change(function () {\r\n            OtherPaymentOfferSelected();\r\n            $('#PlanSetupOptionValMsg').addClass('d-none'); //Remove any validation errors for SetupPlanOption\r\n        });\r\n\r\n        function DisposableIncomeSelected() {\r\n            $('#otherPaymentOption').addClass('d-none');\r\n            $('#averagePaymentOption').addClass('d-none');\r\n            $('input[name=DirectDebitAmount]').val($('#disposableIncome').val());\r\n            updateNumberPayment($('#disposableIncome').val());\r\n            RefreshDDTermInfoBox();           \r\n        }\r\n\r\n        function AverageSetupValueSelected() {\r\n            $('#otherPaymentOption').addClass('d-none');\r\n            $('#disposableIncomeOption').addClass('d-none');\r\n            $('input[name=DirectDebitAmount]').val($('#averagePayment').val());\r\n            updateNumberPayment($('#averagePayment').val());\r\n            RefreshDDTermInfoBox();\r\n        }\r\n\r\n        function OtherPaymentOfferSelected() {\r\n            $('#disposableIncomeOption').addClass('d-none');\r\n            $('#averagePaymentOption').addClass('d-none');\r\n            RefreshDDTermInfoBox();\r\n        }\r\n\r\n        let paymentSettings = {\r\n            account: 'Account Name',\r\n            balance: '',\r\n            discountBalance: '',\r\n            paymentName: '',\r\n            paymentAmount: '',\r\n            term: '',\r\n            paymentDate: '',\r\n            minDateRange: moment().format('DD-MM-YYYY'),\r\n            maxDateRange: moment().add(6, 'months').format('DD-MM-YYYY'),\r\n            iAndELessThanOrIs12MonthsOld: '',\r\n            paymentType: '',\r\n            monthlyDisposableIncomePerAccount: '',\r\n            averageMonthlyPayment: '',\r\n            directDebitAmount: ''\r\n        },\r\n            $activePaymentSettings = $('.payment-active .js-payment-settings-type'),\r\n            discountActive = false,\r\n            numberalFields = [];\r\n\r\n        if ($('.discount-already-selected').length > 0) {\r\n            discountActive = true;\r\n            paymentSettings.discountBalance = $('.discount-already-selected').text();\r\n\r\n            $('.discount-already-selected').hide();\r\n        }\r\n\r\n        // Setup\r\n        mergeAllPaymentSettings();\r\n        setupInfoCard();\r\n        setFullPaymentHiddenInput();\r\n        updateDatePicker(true);\r\n        calculateDDTerm();\r\n        updatePaymentInfo(_getPaymentLength(), paymentSettings.paymentDate);\r\n\r\n        let numberalFieldOptions = {\r\n            numeral: true,\r\n            onValueChanged: function (e) {\r\n                // Update user payment amount\r\n                if (e.target.value == \"\" || e.target.value <= 0 || e.target.value == \".\") {\r\n                    $(this.element).addClass('input-validation-error');\r\n                    $(this.element).siblings('.js-pyament-input-message').text(paymentSettings.fieldEmpty);\r\n                    updateNumberPayment('0.00');\r\n                }\r\n                else if (getFloatValue(e.target.value) > getFloatValue(getBalanceAmount())) {\r\n                    $(this.element).addClass('input-validation-error');\r\n                    $(this.element).siblings('.js-pyament-input-message').text(paymentSettings.fieldExceeded);\r\n                    updateNumberPayment(getBalanceAmount());\r\n                }\r\n                else {\r\n                    $(this.element).removeClass('input-validation-error');\r\n                    $(this.element).siblings('.js-pyament-input-message').text('');\r\n                    updateNumberPayment(e.target.value);\r\n                }\r\n            }\r\n        };\r\n\r\n        setNumberalFields();\r\n        FrequencyChanged();\r\n        ResetDDOptions();\r\n        ShowHideNextButton();\r\n\r\n        // END Setup\r\n\r\n        // jQuery Listeners\r\n        // Change type of payment dropdown\r\n        $('.js-payment-calc .js-payment-select').on('change', (e) => {\r\n            updateActiveSettings();\r\n            setupInfoCard();\r\n            updateDatePicker(true);\r\n        });\r\n\r\n        // Update user payment amount\r\n        $('.js-payment-calc').on('blur', '.payment-active .js-payment-input', (e) => {\r\n            if ($(e.currentTarget).val() != '') {\r\n                $(e.currentTarget).val(parseFloatWithCommas($(e.currentTarget).val()));\r\n            }\r\n        });\r\n\r\n        $('.js-payment-calc').on('change', '.payment-active .js-payment-input', (e) => {\r\n            RefreshDDTermInfoBox();\r\n        });\r\n\r\n        // Change the date for Direct Debt\r\n        $('.js-payment-calc').on('change', '.payment-active .js-datepicker-payment', (e) => {\r\n            let dateSelected = $(e.currentTarget).val();\r\n            updatePaymentInfo(_getPaymentLength(), dateSelected);\r\n            changeStartDate(dateSelected);\r\n        });\r\n\r\n        // Update info based on payment length (monthly, weekly etc.)\r\n        $('.js-payment-calc .js-payment-length').on('change', () => {\r\n            FrequencyChanged();\r\n        });\r\n\r\n        $('.js-apply-dicount').on('click', () => {\r\n            discountActive = !discountActive;\r\n            $('.js-discount-info').stop(false, false).slideToggle();\r\n            $('#discount-apply-confirm').attr('disabled', function (i, v) { return !v; });\r\n\r\n            let $this = $('.js-hide-option').parent();\r\n            $('.js-hide-option').attr('disabled', function (i, v) { return !v; });\r\n            $this.select2('destroy');\r\n\r\n            $this.select2({\r\n                theme: 'lowell',\r\n                width: '100%',\r\n                minimumResultsForSearch: -1,\r\n                selectOnClose: true,\r\n            });\r\n\r\n            $this.val('').trigger('change');\r\n\r\n            ResetDDOptions();\r\n\r\n            updateFullPayment();\r\n            setupInfoCard(); // The on change event on the select will take care of this. refer to line 73\r\n            calculateDDTerm();\r\n            setDDField();\r\n            RefreshDDTermInfoBox();\r\n        });\r\n\r\n        if ($('.js-apply-dicount').is(':checked')) {\r\n            discountActive = !discountActive;\r\n            $('.js-discount-info').slideToggle();\r\n            $('#discount-apply-confirm').attr('disabled', function (i, v) { return !v; });\r\n\r\n            let $this = $('.js-hide-option').parent();\r\n            $('.js-hide-option').attr('disabled', function (i, v) { return !v; });\r\n            $this.select2('destroy');\r\n\r\n            $this.select2({\r\n                theme: 'lowell',\r\n                width: '100%',\r\n                minimumResultsForSearch: -1,\r\n                selectOnClose: true,\r\n            });\r\n\r\n            $('.js-payment-amount').each((index, element) => {\r\n                element.value = 0;\r\n            });\r\n\r\n            updateFullPayment();\r\n            setupInfoCard();\r\n            calculateDDTerm();\r\n            RefreshDDTermInfoBox();\r\n        }\r\n        // END jQuery Listeners\r\n\r\n        // Public Functions\r\n        function FrequencyChanged()\r\n        {\r\n            let paymentFrequency = _getPaymentLength();\r\n\r\n            if (paymentFrequency == 'monthly') {\r\n                updateDatePicker(true);\r\n            }\r\n            else {\r\n                updateDatePicker();\r\n            }\r\n\r\n            const { week, fortnight, every4week } = getDurationConstants();\r\n\r\n            let disposableIncome = $('#disposableIncome');\r\n            let averagePayment = $('#averagePayment');\r\n\r\n            switch (paymentFrequency) {\r\n                case 'weekly':\r\n                    disposableIncome.val(parseFloatWithCommas(paymentSettings.monthlyDisposableIncomePerAccount / week));\r\n                    averagePayment.val(parseFloatWithCommas(paymentSettings.averageMonthlyPayment / week));\r\n                    break;\r\n                case 'fortnightly':\r\n                    disposableIncome.val(parseFloatWithCommas(paymentSettings.monthlyDisposableIncomePerAccount / fortnight));\r\n                    averagePayment.val(parseFloatWithCommas(paymentSettings.averageMonthlyPayment / fortnight));\r\n                    break;\r\n                case '4week':\r\n                    disposableIncome.val(parseFloatWithCommas(paymentSettings.monthlyDisposableIncomePerAccount / every4week));\r\n                    averagePayment.val(parseFloatWithCommas(paymentSettings.averageMonthlyPayment / every4week));\r\n                    break;\r\n                case 'every 4 weeks':\r\n                    disposableIncome.val(parseFloatWithCommas(paymentSettings.monthlyDisposableIncomePerAccount / every4week));\r\n                    averagePayment.val(parseFloatWithCommas(paymentSettings.averageMonthlyPayment / every4week));\r\n                    break;\r\n                case 'monthly':\r\n                    disposableIncome.val(parseFloatWithCommas(paymentSettings.monthlyDisposableIncomePerAccount));\r\n                    averagePayment.val(parseFloatWithCommas(paymentSettings.averageMonthlyPayment));\r\n                    break;\r\n            }\r\n\r\n            let ddAmount = _getDDPaymentAmount();\r\n\r\n            if ($('#DisposableIncome').prop('checked')) {\r\n                ddAmount = disposableIncome.val();\r\n            }\r\n\r\n            if ($('#AverageSetupValue').prop('checked')) {\r\n                ddAmount = averagePayment.val();\r\n            }\r\n\r\n            updateNumberPayment(ddAmount);\r\n            updateDirectDebtInfo(ddAmount);\r\n\r\n            RefreshDDTermInfoBox();\r\n        }\r\n\r\n        function mergeAllPaymentSettings() {\r\n            $('.js-payment-calc .js-general-payment-settings input').each((index, element) => {\r\n                element.value = element.value || paymentSettings[element.name];\r\n                paymentSettings[element.name] = element.value;\r\n            });\r\n\r\n            $('.payment-active').find('.js-payment-settings-type input').each((index, element) => {\r\n                element.value = element.value || paymentSettings[element.name];\r\n                paymentSettings[element.name] = element.value;\r\n            });\r\n\r\n            //Convert string to bool\r\n            paymentSettings.iAndELessThanOrIs12MonthsOld = JSON.parse(paymentSettings.iAndELessThanOrIs12MonthsOld);\r\n        }\r\n\r\n        function setupInfoCard() {\r\n            if ($('.payment-active').data('form-fields') == 'direct-debit') {\r\n                $('.js-payment-info-box').find('.js-payment-info').show();\r\n            }\r\n            else {\r\n                $('.js-payment-info-box').find('.js-payment-info').hide();\r\n            }\r\n\r\n            if (discountActive) {\r\n                $('.js-payment-info-box').find('.js-payment-balance').text('£' + parseFloatWithCommas(paymentSettings.discountBalance));\r\n                $('.js-payment-info-box').find('.js-payment-balance-name').text('Discounted balance');\r\n                // Fix for - TFS 86359\r\n                $('.js-payment-info-box').find('.js-payment-amount').text('£' + parseFloatWithCommas(paymentSettings.discountBalance));\r\n            }\r\n            else {\r\n                $('.js-payment-info-box').find('.js-payment-balance').text('£' + parseFloatWithCommas(paymentSettings.balance));\r\n                $('.js-payment-info-box').find('.js-payment-balance-name').text('Balance');\r\n                $('.js-payment-info-box').find('.js-payment-amount').text('£' + parseFloatWithCommas(paymentSettings.paymentAmount));\r\n            }\r\n\r\n            $('.js-payment-info-box').find('.js-payment-account').text(paymentSettings.account);\r\n            $('.js-payment-info-box').find('.js-payment-name').text(paymentSettings.paymentName);\r\n            $('.js-payment-info-box').find('.js-payment-term').text(paymentSettings.term);\r\n            $('.js-payment-info-box').find('.js-payment-date').text(moment(paymentSettings.paymentDate, 'DD-MM-YYYY').format('Do MMMM YYYY'));\r\n        }\r\n\r\n        function updateFullPayment() {\r\n            $('.js-payment-amount').val(discountActive\r\n                ? parseFloatWithCommas(paymentSettings.discountBalance)\r\n                : parseFloatWithCommas(paymentSettings.balance));\r\n        }\r\n\r\n        function setFullPaymentHiddenInput() {\r\n            $('input[type=hidden].js-payment-amount').val(parseFloatWithCommas(paymentSettings.paymentAmount));\r\n        }\r\n\r\n        function updateDirectDebtInfo(amount) {\r\n            let termLength = _calcLengthOfDD(getBalanceAmount(), amount, _getPaymentLength());\r\n            $activePaymentSettings.find('input[name=term]').val(termLength);\r\n            $('.js-payment-info-box').find('.js-payment-term').text(termLength);\r\n            $('.js-payment-info-box').find('.js-payment-name').text($('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentName]').val());\r\n        }\r\n\r\n        function changeStartDate(dateSelected) {\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentDate]').val(dateSelected);\r\n            $('.js-payment-info-box').find('.js-payment-date').text(moment(dateSelected, 'DD-MM-YYYY').format('Do MMMM YYYY'));\r\n        }\r\n\r\n        function updateActiveSettings() {\r\n            $activePaymentSettings = $('.payment-active .js-payment-settings-type');\r\n\r\n            $('.payment-active').find('.js-payment-settings-type input').each((index, element) => {\r\n                element.value = element.value || paymentSettings[element.name];\r\n                paymentSettings[element.name] = element.value;\r\n            });\r\n        }\r\n\r\n        function setNumberalFields() {\r\n            $('.js-payment-calc .js-payment-input').each((index, element) => {\r\n                numberalFields.push(new cleave(element, numberalFieldOptions));\r\n            });\r\n        }\r\n\r\n        function updateNumberPayment(value) {\r\n            let formattedValue = parseFloatWithCommas(value);\r\n\r\n            $activePaymentSettings.find('input[name=paymentAmount]').val(formattedValue);\r\n            $('.js-payment-info-box').find('.js-payment-amount').text('£' + formattedValue);\r\n\r\n            if ($('.payment-active').data('form-fields') == 'direct-debit') {\r\n                updateDirectDebtInfo(formattedValue);\r\n            }\r\n        }\r\n\r\n        function calculateDDTerm() {\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=term]').val(\r\n                _calcLengthOfDD(\r\n                    getBalanceAmount(),\r\n                    _getDDPaymentAmount(),\r\n                    _getPaymentLength()\r\n                )\r\n            );\r\n        }\r\n\r\n        function setDDField() {\r\n            if (getFloatValue($('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentAmount]').val()) >\r\n                getFloatValue(getBalanceAmount()))\r\n            {\r\n                $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentAmount]').val('1.00');\r\n                $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-input').val('1.00');\r\n            }\r\n        }\r\n\r\n        function getBalanceAmount() {\r\n            return discountActive ? paymentSettings.discountBalance : paymentSettings.balance;\r\n        }\r\n\r\n        function updateDatePicker(monthly = false) {\r\n            if (window.picker != null) {\r\n                window.picker.destroy();\r\n            }\r\n\r\n            let picker = new Pikaday({\r\n                field: $('.js-datepicker-payment')[0],\r\n                firstDay: 1,\r\n                format: 'DD-MM-YYYY',\r\n                minDate: moment(paymentSettings.minDateRange, 'DD-MM-YYYY').toDate(),\r\n                maxDate: moment(paymentSettings.maxDateRange, 'DD-MM-YYYY').toDate(),\r\n                disableWeekends: false, // Fix for Bug 86362\r\n                showDaysInNextAndPreviousMonths: true,\r\n                keyboardInput: false\r\n            });\r\n\r\n            if (paymentSettings.paymentDate != '' && monthly) {\r\n                picker.setDate(moment(paymentSettings.paymentDate, 'DD-MM-YYYY'));\r\n            }\r\n            else {\r\n                picker.setDate(moment(paymentSettings.minDateRange, 'DD-MM-YYYY').toDate());\r\n            }\r\n\r\n            window.picker = picker;\r\n        }\r\n\r\n        function updatePaymentInfo(legnth, date) {\r\n\r\n            let weekendClause = '';\r\n            let dayOfWeek = moment(date, 'DD-MM-YYYY').day();\r\n\r\n            if (dayOfWeek == 6 || dayOfWeek == 0)\r\n            {\r\n                weekendClause = ' You have selected a weekend, however, your payment will be taken on the next working day.'\r\n            }\r\n\r\n            switch (legnth) {\r\n                case 'monthly':\r\n                    $('.js-payment-info').html('Payments will be taken on the <span>' + moment(date, 'DD-MM-YYYY').format('Do') + ' of each month</span>, in cases that this falls on a bank holiday or a weekend, the payment will be taken on the next working day.');\r\n                    break;\r\n                case 'weekly':\r\n                    $('.js-payment-info').html('Payments will be taken on the <span>' + _getWeekDay(dayOfWeek) + '</span> ' + _getPaymentLength() + '.' + weekendClause);\r\n                    break;\r\n                case 'fortnightly':\r\n                    $('.js-payment-info').html('Payments will be taken each <span>' + _getWeekDay(dayOfWeek) + '</span>, on a fortnightly basis.' + weekendClause);\r\n                    break;\r\n                case '4week':\r\n                case 'every 4 weeks':\r\n                    $('.js-payment-info').html('Your first payment will be on the <span>' + moment(date, 'DD-MM-YYYY').format('Do of MMM') + '</span> and then every <span>4th ' + _getWeekDay(dayOfWeek) + '</span> afterwards.' + weekendClause);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function RefreshDDTermInfoBox()\r\n        {\r\n            let ddPaymentAmount = getFloatValue(_getDDPaymentAmount());\r\n            let ddPaymentFrequency = _getPaymentLength();\r\n            let balance = getFloatValue(getBalanceAmount());\r\n\r\n            if (ddPaymentAmount && ddPaymentFrequency && balance) {\r\n\r\n                //Show DD Term InfoBox\r\n                let ddTermTotalMonths = _calcDDTotalMonths(balance, ddPaymentAmount, ddPaymentFrequency);\r\n                let ddTermMonths = (ddTermTotalMonths % 12);\r\n                let ddTermYears = Math.floor(ddTermTotalMonths / 12);\r\n\r\n                if (ddTermMonths <= 0 && ddTermYears <= 0) {\r\n                    ddTermMonths = ddTermMonths + 1;\r\n                }\r\n\r\n                $('#dd-term-years').text(ddTermYears);\r\n                $('#dd-term-months').text(ddTermMonths);\r\n                $('#dd-term-message').removeClass('d-none');\r\n\r\n                if (paymentSettings.iAndELessThanOrIs12MonthsOld && paymentSettings.monthlyDisposableIncomePerAccount <= 0) {\r\n                    $('#dd-term-debt-advice').removeClass('d-none');\r\n                }\r\n                else {\r\n                    $('#dd-term-debt-advice').addClass('d-none');\r\n                }\r\n            }\r\n            else {\r\n                //Hide DD Term InfoBox\r\n                $('#dd-term-message').addClass('d-none');\r\n            }\r\n        }\r\n\r\n        function ShowHideNextButton() {\r\n            if ($('.js-payment-select').val() === 'direct-debit') {\r\n                $('#btnNext').addClass('d-none');\r\n            }\r\n            else {\r\n                $('#btnNext').removeClass('d-none');\r\n            }\r\n        }\r\n        \r\n        // END Public Functions\r\n    }\r\n};\r\n\r\n// Private Functions\r\nfunction _calcDDTotalMonths(balance, ddAmount, ddFrequency) {\r\n\r\n    const { week, fortnight, every4week } = getDurationConstants();\r\n    \r\n    switch (ddFrequency) {\r\n        case 'monthly':\r\n            return Math.ceil(balance / ddAmount);\r\n        case 'weekly':\r\n            return Math.ceil((balance / ddAmount) / week);\r\n        case 'fortnightly':\r\n            return Math.ceil((balance / ddAmount) / fortnight);\r\n        case '4week':\r\n        case 'every 4 weeks':\r\n            return Math.ceil((balance / ddAmount) / every4week);\r\n    }\r\n}\r\n\r\nfunction _calcLengthOfDD(balance, amount, length) {\r\n    const { week, fortnight, every4week } = getDurationConstants();\r\n    let numberBalance = getFloatValue(balance)\r\n    let numberAmount = getFloatValue(amount);\r\n\r\n    let term;\r\n    switch (length) {\r\n        case 'monthly':\r\n            term = Math.ceil(numberBalance / numberAmount);\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentName]').val('Monthly payment');\r\n            break;\r\n        case 'weekly':\r\n            term = Math.ceil((numberBalance / numberAmount) / week);\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentName]').val('Weekly payment');\r\n            break;\r\n        case 'fortnightly':\r\n            term = Math.ceil((numberBalance / numberAmount) / fortnight);\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentName]').val('Fortnightly payment');\r\n            break;\r\n        case '4week':\r\n        case 'every 4 weeks':\r\n            term = Math.ceil((numberBalance / numberAmount) / every4week);\r\n            $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentName]').val('Four Weekly payment');\r\n            break;\r\n    }\r\n\r\n    if (!(isFinite(term))) {\r\n        return 'None';\r\n    }\r\n\r\n    if (term == 0) {\r\n        term = term + 1;\r\n    }\r\n\r\n    return term + ' months';\r\n}\r\n\r\nfunction _getWeekDay(dayNumber) {\r\n    switch (dayNumber) {\r\n        case 1:\r\n            return 'Monday';\r\n        case 2:\r\n            return 'Tuesday';\r\n        case 3:\r\n            return 'Wednesday';\r\n        case 4:\r\n            return 'Thursday';\r\n        case 5:\r\n            return 'Friday';\r\n        case 6:\r\n            return 'Saturday';\r\n        case 0:\r\n            return 'Sunday';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nfunction _getPaymentLength() {\r\n    if ($('.js-payment-calc .js-payment-length').val() == '4week') {\r\n        return 'every 4 weeks';\r\n    }\r\n    return $('.js-payment-calc .js-payment-length').val();\r\n}\r\n\r\nfunction _getDDPaymentAmount() {\r\n    return $('.js-payment-calc div[data-form-fields=direct-debit] .js-payment-settings-type input[name=paymentAmount]').val();\r\n}\r\n\r\n// END Private Functions"],"sourceRoot":""}